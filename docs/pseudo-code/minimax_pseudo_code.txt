def minimax(state, depth, alpha, beta, maximizingPlayer):
	valid_moves = state.get_valid_moves()
	if depth == 0 or is_terminal_node:
		if is_terminal:
		    return check_win(player)
		else: # Depth is zero
			return (None, evaluate(state))
	if maximizingPlayer:
		utility = -math.inf
		for move in valid_moves:
			new_utility = minimax(state,depth-1,alpha,beta,False)
			if new_utility > utility:
				utility = new_utility
				best_move = move
			alpha = max(alpha, utility)
			if alpha >= beta:
				break
		return best_move, utility
	else: # Minimizing player
		utility = math.inf
		for move in valid_moves:
			new_utility = minimax(state,depth-1,alpha,beta,True)
			if new_utility < utility:
				utility = new_utility
				best_move = move
			beta = min(beta, utility)
			if alpha >= beta:
				break
		return best_move, utility