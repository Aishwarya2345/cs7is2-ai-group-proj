def montecarlo_tree_search(board,max_iter,currNode,timeout):
	rootnode = Node(piece=board.PREV_PLAYER, board=board)
	if currNode is not None:
		rootnode = currNode
	start = time.perf_counter()
	for i in range(max_iter):
		node = rootnode
		while node.available_moves==[] and node.children!=[]:
			node = node.selection()
			drop_piece(node.move)
		if node.available_moves != []:
			col = random.choice(node.available_moves)
			node = node.expand(col, current_board_state)		
		while get_valid_locations():
			col = random.choice(get_valid_locations())
			if winning_move(PREV_PLAYER):
				break
		while node is not None:
			node.update(current_board_state)
			node = node.parent
		duration = time.perf_counter() - start
		if duration > timeout:
			break
	win_ratio = lambda node: node.wins/node.visits
	sorted_children = sorted(children, key=win_ratio)
	return rootnode, sorted_children[0].move